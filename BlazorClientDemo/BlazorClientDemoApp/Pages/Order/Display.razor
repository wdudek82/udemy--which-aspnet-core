@page "/Order/Display/{Id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Display</h3>

@if (!string.IsNullOrWhiteSpace(errorString))
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (orderInfo.Order is null)
{
    <h4>Loading...</h4>
}
else
{
    <table class="table">
        <tbody>
        <tr>
            <td>
                <strong>Order Name</strong>
            </td>
            <td>@orderInfo.Order.OrderName</td>
        </tr>
        <tr>
            <td>
                <strong>Order Date</strong>
            </td>
            <td>@orderInfo.Order.OrderDate</td>
        </tr>
        <tr>
            <td>
                <strong>Item Ordered</strong>
            </td>
            <td>@orderInfo.ItemPurchased</td>
        </tr>
        <tr>
            <td>
                <strong>Quantity</strong>
            </td>
            <td>@orderInfo.Order.Quantity</td>
        </tr>
        <tr>
            <td>
                <strong>Total</strong>
            </td>
            <td>@($"{orderInfo.Order.Total:C}")</td>
        </tr>
        <tr>
            <td colspan="2">
                <DeleteButton DeleteOrder="HandleDeleteRecord"/>
            </td>
        </tr>
        </tbody>
    </table>

     <EditForm Model="@_updateModel" OnValidSubmit="HandleValidSubmit">
         <DataAnnotationsValidator/>
         <ValidationSummary Model="@_updateModel"/>
         <div class="form-group">
             <label class="control-label">Name</label>
             <InputText @bind-Value="_updateModel.OrderName" class="form-control"/>
             <ValidationMessage For="@(() => _updateModel.OrderName)" class="text-danger"/>
         </div>
         <div class="form-group">
             <button type="submit" class="btn btn-primary">Update Order Name</button>
         </div>
     </EditForm>
}

@code
{
    [Parameter]
    public int Id { get; set; }

    private OrderResultModel orderInfo = new OrderResultModel();
    private OrderUpdateModel _updateModel = new OrderUpdateModel();
    private string errorString;

    protected override async Task OnInitializedAsync()
    {
        HttpResponseMessage response = await Http.GetAsync($"api/order/{Id}");

        if (response.IsSuccessStatusCode)
        {
            orderInfo = await response.Content.ReadFromJsonAsync<OrderResultModel>();
            _updateModel.Id = orderInfo.Order.Id;
            _updateModel.OrderName = orderInfo.Order.OrderName;
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            HttpResponseMessage response = await Http.PutAsJsonAsync("api/order", _updateModel);
            orderInfo.Order.OrderName = _updateModel.OrderName;
        }
        catch (Exception e)
        {
            errorString = e.Message;
        }
    }

    private async Task HandleDeleteRecord()
    {
        HttpResponseMessage response = await Http.DeleteAsync($"api/order/{Id}");

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("food/list");
        }
        else
        {
            errorString = response.ReasonPhrase;
        }
    }
}
